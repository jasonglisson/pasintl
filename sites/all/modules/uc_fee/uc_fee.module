<?php

/**
 * @file
 * Allows store administrators to define fees which can be associated with a product.
 */

/**
 * The fee is an absolute price and will be added to the base product price as is
 * This is the default setting.
 */
define('UC_FEE_TYPE_ABSOLUTE', 0x0001);

/**
 * The fee works as a percentage multiplier on the base price of the product
 */
define('UC_FEE_TYPE_PERCENTAGE', 0x0002);

/******************************************************************************
 * Drupal Hooks                                                               *
 ******************************************************************************/

/**
 * Implementation of hook_help().
 */
function uc_fee_help($path, $arg) {
  switch ($path) {
    // Help messages for the globals feels overview.
    case 'admin/store/fees':
      return '<p>' . t('Add fees through this page and then use the <a href="!url">rules interface</a> to add conditions to the fees that limit which orders they are applied to. Use the conditions link to jump to a particular fees conditions configuration page.', array('!url' => 'admin/config/workflow/rules')) . '</p>';
    // Help messages for the fees overview on products and classes.
    case 'node/%/edit/fees':
      return '<p>' . t('Override global fee settings for this product') . '</p>';
    case 'admin/store/products/classes/%/fees':
      return '<p>' . t('Override global fee settings for this product class') . '</p>';

   }
}

/**
 * Implementation of hook_menu().
 */
function uc_fee_menu() {
  $items['admin/store/fees'] = array(
    'title' => 'Fees',
    'description' => 'Create and edit fees.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_fee_admin_form'),
    'access arguments' => array('administer products'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -1,
    'file' => 'uc_fee.admin.inc',
  );
  $items['admin/store/fees/overview'] = array(
    'title' => 'Overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/store/fees/add'] = array(
    'title' => 'Add a fee',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_fee_form'),
    'access arguments' => array('administer products'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
    'file' => 'uc_fee.admin.inc',
  );
  $items['admin/store/fees/%uc_fee/edit'] = array(
    'title' => 'Edit fee',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_fee_form', 3),
    'access arguments' => array('administer products'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_fee.admin.inc',
  );
  $items['admin/store/fees/%uc_fee/delete'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_fee_delete_confirm', 3),
    'access arguments' => array('administer products'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_fee.admin.inc',
  );

  // Menu items for default product class fees.
  $items['admin/store/products/classes/%uc_product_class/fees'] = array(
    'title' => 'Fees',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_object_fees_form', 4, 'class'),
    'access arguments' => array('administer product classes'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => 'uc_fee.admin.inc',
  );

  // Insert subitems into the edit node page for product types.
  $items['node/%node/edit/fees'] = array(
    'title' => 'Fees',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_object_fees_form', 1, 'product', 'overview'),
    'access callback' => 'uc_fee_product_fee_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => 'uc_fee.admin.inc',
  );
  $items['fee/calculate'] = array(
    'page callback' => 'uc_fee_javascript',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function uc_fee_admin_paths() {
  $paths = array(
    'node/*/edit/fees' => TRUE,
  );

  return $paths;
}

/**
 * Implementation of hook_init().
 */
function uc_fee_init() {
  require_once('uc_fee.rules.inc');
}

/**
 * Implementation of hook_access().
 */
function uc_fee_product_fee_access($node) {
  return uc_product_is_product($node) && node_access('update', $node);
}

/**
 * Implementation of hook_theme().
 */
function uc_fee_theme() {
  return array(
    'uc_fee_admin_form' => array(
      'render element' => 'form',
      'file' => 'uc_fee.admin.inc',
    ),
    'uc_fee_price' => array(
      'variables' => array(),
    ),
    'uc_fee_type' => array(
      'variables' => array(),
    ),
  );
}

/**
 * Implementation of hook_form_alter().
 *
 * Attach fee descriptions to the form with the "Add to Cart" button.
 */
function uc_fee_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'uc_paypal_wps_form') {
	if (list($order_id, $toss) = explode('-',$form['invoice']['#value'])) {
		$order = uc_order_load($order_id);

		$fees_total = 0;
		if (is_array($order->line_items)) {
			foreach ($order->line_items as $i => $line) {
			  if ($line['type'] == 'fee') {
				$fees_total += $line['amount'];
			  }
			}
		}
		$form['handling']['#value'] = $fees_total;
	}
  }

  if ($form_id == 'uc_cart_checkout_form') {
    if (isset($form['panes']['payment'])) {
      foreach ($form['panes']['cart']['cart_review_table']['#items'] as $line_item) {
        $order = $line_item->order;
        break;
      }
      drupal_add_js(array(
        'ucFeeWeight' => variable_get('uc_li_fee_weight', 9),
        'ucURL' => array(
          'calculateFee' => url('fee/calculate'),
          'ucOrder' => serialize($order),
        ),
      ), 'setting');
      drupal_add_js(drupal_get_path('module', 'uc_fee') .'/uc_fee.js');
    }
  }
  elseif (strpos($form_id, 'add_to_cart_form') || strpos($form_id, 'add_product_form')) {
    // If the node has a product list, add fees to them
    if (isset($form['products']) && count(element_children($form['products']))) {
      foreach (element_children($form['products']) as $key) {
        $form['products'][$key]['fees'] = _uc_fee_alter_form(node_load($key));
        if (is_array($form['products'][$key]['fees'])) {
          $form['products'][$key]['fees']['#tree'] = TRUE;
          $form['products'][$key]['#type'] = 'fieldset';
        }
      }
    }
    // If not, add fees to the node.
    else {
      $form['fees'] = _uc_fee_alter_form($form['node']['#value']);
      if (is_array($form['fees'])) {
        $form['fees']['#weight'] = -0.8;
      }
    }
  }
}

/**
 * Implementation of hook_node_load().
 */
function uc_fee_node_load($nodes, $types) {
  foreach($nodes as $id => $node) {
    if (array_intersect(uc_product_types(), array($node->type))) {
      $fees = uc_product_get_fees($node->nid);
      if (is_array($fees) && !empty($fees)) {
        $nodes[$id]->fees = $fees;
      }
    }
  }
}

/**
 * Implementation of hook_node_delete().
 */
function uc_fee_node_delete($node) {
  if (array_intersect(uc_product_types(), array($node->type))) {
    db_delete('uc_product_fees')
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Implementation of hook_node_update_index().
 */
function uc_fee_node_update_index($node) {
  if (array_intersect(uc_product_types(), array($node->type))) {
    $output = '';
    $fees = uc_product_get_fees($node->nid);
    foreach ($fees as $fee) {
      $output .= '<h3>'. $fee->name .'</h3>';
      $output .= "\n";
    }
    return $output;
  }
}


/******************************************************************************
 * Ubercart Hooks                                                             *
 ******************************************************************************/

/**
 * Implementation of hook_uc_product_class().
 */
function uc_fee_uc_product_class($type, $op) {
  switch ($op) {
    case 'delete':
      //db_query("DELETE FROM {uc_class_fees} WHERE pcid = '%s'", $type);
      db_delete('uc_class_fees')
          ->condition('pcid', $type)
          ->execute();
    break;
  }
}

/**
 * Implementation of Ãœbercart's hook_uc_line_item().

function uc_fee_uc_line_item() {
  $items['fee'] = array(
    'title' => t('Fee'),
    //'callback' => 'uc_fee_line_item_fee',
    'weight' => 2,
    'stored' => TRUE,
    'default' => FALSE,
    'calculated' => TRUE,
    'display_only' => FALSE,
  );
  return $items;
}
 */

/**
 * Implements hook_uc_order().
 *
 * Updates and saves tax line items to the order.
 */
function uc_fee_uc_order($op, &$order, $arg2) {
  switch ($op) {
    case 'save':
      if (1 == 1) {
		  $fee_total = 0;
		  $fee_totals = module_invoke_all('calculate_fees', $order);

	      foreach ($fee_totals as $one_fee) {
			$fee_total += $one_fee;
		  }
		  return $fee_total;
	}
    break;
    case 'total':
		$fee_total = 0;
		if (is_array($order->line_items)) {
			foreach ($order->line_items as $i => $line) {
			  if ($line['type'] == 'fee') {
				$fee_total += $line['amount'];
			  }
			}
		}
		return $fee_total;
		break;
  }
}


/**
 * Implements hook_form_uc_order_edit_form_alter().
 */
function uc_fee_form_uc_order_edit_form_alter(&$form, &$form_state) {
  $order = $form['#order'];
  $line_items = $order->line_items;
  foreach ($line_items as $item) {
    // Tax line items are stored in the database, but they can't be changed by
    // the user.
    if ($item['type'] == 'fee') {
      $form['line_items'][$item['line_item_id']]['title'] = array(
        '#markup' => check_plain($item['title']),
      );
    }
  }
}


/******************************************************************************
 * Menu Callbacks                                                             *
 ******************************************************************************/

function uc_fee_line_item_fee($op, $order) {
  switch ($op) {
    case 'display':
      $lines = array();
      $taxes = uc_taxes_calculate($order);
      foreach ($taxes as $tax) {
        foreach ($order->line_items as $line_item) {
          if ($line_item['type'] == 'tax' && $line_item['data']['tax_id'] == $tax->id) {
            continue 2;
          }
        }
        $lines[] = _uc_taxes_to_line_item($tax);
      }
      return $lines;
  }
}


/**
 * Handle the fee line item.
 */
/*function uc_fee_line_item_fee($op, $order) {
  switch ($op) {
    case 'cart-preview':
      $fees = module_invoke_all('calculate_fees', $order);
      $script = '';
      foreach ($fees as $fee) {
        if ($fee->price > 0) {
          $weight = variable_get('uc_li_fee_weight', 7) + ($fee->weight / 10);
          $script .= "set_line_item('uc_fee_". $fee->fid ."', '". $fee->name ."', ". $fee->price .", + ". $weight .", 1, false);\n";
        }
      }
      if ($script) {
        drupal_add_js("$(document).ready(function() {
          if (window.set_line_item) {
            ". $script .";
            render_line_items();
          }
        });", 'inline');
      }
      break;
    case 'save':
      dpm('test');
      $fees = module_invoke_all('calculate_fees', $order);
  }
}*/

/******************************************************************************
 * Module and Helper Functions
 ******************************************************************************/

/**
 * Load all fees.
 */
function uc_fee_get_fees($show_all=FALSE) {
  static $fees = array();
  if (empty($fees)) {
    //$result = db_query("SELECT * FROM {uc_fees} ORDER BY weight");
    $query = db_select('uc_fees', 'f');
    $query
      ->fields('f')
      ->orderBy('f.weight');
    
    // If show all is false only display active fees
    if (!$show_all) {
      $query
        ->condition('f.is_active', 1);
    }
    
    $result = $query->execute();
    
    foreach($result as $fee) {
      $fees[$fee->fid] = $fee;
    }
  }
  return $fees;
}
 
/**
 * Loads all fees associated with a product node.
 */
function uc_product_get_fees($nid, $show_all=FALSE) {
  // Load product level fee overrides
  $object_fees = array();
  //$result = db_query("SELECT pf.fid FROM {uc_product_fees} AS pf LEFT JOIN {uc_fees} AS f ON pf.fid = f.fid WHERE pf.nid = %d ORDER BY f.weight, f.name", $nid);
  $query = db_select('uc_product_fees', 'pf');
  $query
    ->addJoin('LEFT', 'uc_fees', 'f', 'pf.fid = f.fid');
  $query
    ->fields('pf', array('fid'));
  $query
    ->condition('pf.nid', $nid)
    ->orderBy('f.weight, f.name');
  $result = $query->execute();
  foreach($result as $fee) {
    $object_fees[$fee->fid] = uc_fee_load($fee->fid, $nid, 'product');
  }
  
  // merge with class fees
  //$pcid = db_result(db_query("SELECT n.type FROM {node} AS n WHERE n.nid = %d", $nid));
  $query = db_select('node', 'n');
  $query
    ->fields('n', array('type'));
  $query
    ->condition('n.nid', $nid);
  $pcid = $query->execute()->fetchField();
  $all_fees = uc_class_get_fees($pcid);

  $product_fees = array();
  foreach ($all_fees as $fee) {
    // don't include fees that have been excluded
    if (!$show_all && isset($object_fees[$fee->fid]) && !$object_fees[$fee->fid]->is_active) {
      continue;
    }
    $product_fees[$fee->fid] = isset($object_fees[$fee->fid])? $object_fees[$fee->fid] : $fee;
  }
  return $product_fees;
}

/**
 * Loads all fees associated with a product class.
 */
function uc_class_get_fees($pcid, $show_all=FALSE) {
  $object_fees = array();
  //$result = db_query("SELECT cf.fid FROM {uc_class_fees} AS cf LEFT JOIN {uc_fees} AS f ON cf.fid = f.fid WHERE cf.pcid = '%s' ORDER BY f.weight, f.name", $pcid);
  $query = db_select('uc_class_fees', 'cf');
  $query
    ->addJoin('LEFT', 'uc_fees', 'f', 'cf.fid = f.fid');
  $query
    ->fields('cf', array('fid'));
  $query
    ->condition('cf.pcid', $pcid)
    ->orderBy('f.weight, f.name');
  $result = $query->execute();
  foreach($result as $fee) {
    $object_fees[$fee->fid] = uc_fee_load($fee->fid, $pcid, 'class');
  }

  // Merge with global fees
  $all_fees = uc_fee_get_fees();
  $class_fees = array();
  foreach ($all_fees as $fee) {
    // don't include fees that have been excluded
    if (!$show_all && isset($object_fees[$fee->fid]) && !$object_fees[$fee->fid]->is_active) {
      continue;
    }
    $class_fees[$fee->fid] = isset($object_fees[$fee->fid]) ? $object_fees[$fee->fid] : $fee;
  }
  
  return $class_fees;
}

/**
 * Load a fee from the database.
 *
 * @param $fee_id
 *   The id of the fee.
 * @param $nid
 *   Node id. If given, the fee will have the options that have been
 *   assigned to that node for the fee.
 */
function uc_fee_load($fee_id, $nid = NULL, $type = '') {
  if ($nid) {
    switch ($type) {
      case 'product':
        $query = db_select('uc_fees', 'f');
        $query
          ->addJoin('LEFT', 'uc_product_fees', 'pf', 'f.fid = pf.fid AND pf.nid = '.$nid);
        $query
          ->fields('f', array('fid', 'name', 'weight', 'type', 'description', 'max_applications', 'do_end_processing', 'is_exclusive', 'display_on_product'));
        $query->addField('f', 'price', 'default_price');
        $query->addField('f', 'is_active', 'default_is_active');
        $query
          ->fields('pf', array('price', 'is_active'));
        $query
          ->condition('f.fid', $fee_id);
        $result = $query->execute();
        $fee = $result->fetchObject();
        $fee->price_usage = 'product';
        $fee->active_usage = 'product';
        
        // If there is no product override on price or active check class overrides
        if (is_null($fee->price) || is_null($fee->is_active)) {
          $node = node_load($nid);
          $class_fee = uc_fee_load($fee_id, $node->type, 'class');
          // If class override exists replace product nulls
          if (!empty($class_fee)) {
            if (is_null($fee->price)) {
              $fee->price = $class_fee->price;
              $fee->price_usage = 'class';
            }
            if (is_null($fee->is_active)) {
              $fee->is_active = $class_fee->is_active;
              $fee->active_usage = 'class';
            }
          }
        }
        
        break;
      case 'class':
        $query = db_select('uc_fees', 'f');
        $query
          ->addJoin('LEFT', 'uc_class_fees', 'cf', "f.fid = cf.fid AND cf.pcid = '$nid'");
        $query
          ->fields('f', array('fid', 'name', 'weight', 'type', 'description', 'max_applications', 'do_end_processing', 'is_exclusive', 'display_on_product'));
        $query->addField('f', 'price', 'default_price');
        $query->addField('f', 'is_active', 'default_is_active');
        $query
          ->fields('cf', array('price', 'is_active'));
        $query
          ->condition('cf.pcid', $nid)
          ->condition('f.fid', $fee_id);
        $result = $query->execute();
        $fee = $result->fetchObject();
        break;
      default:
        $query = db_select('uc_fees', 'f');
        $query
          ->fields('f')
          ->condition('f.fid', $fee_id);
          
        $result = $query->execute();
        $fee = $result->fetchObject();
        break;
    }
    if (isset($fee->default_price) && is_null($fee->price)) {
      $fee->price = $fee->default_price;
      $fee->price_usage = 'default';
    }
    if (isset($fee->default_is_active) && is_null($fee->is_active)) {
      $fee->is_active = $fee->default_is_active;
      $fee->active_usage = 'default';
    }
  }
  else {
    $query = db_select('uc_fees', 'f');
    $query
      ->fields('f')
      ->condition('f.fid', $fee_id);
      
    $result = $query->execute();
    $fee = $result->fetchObject();
  }
  return $fee;
}

/**
 * Helper function for uc_fee_form_alter()
 */
function _uc_fee_alter_form($product) {

  if (isset($product->fees) && !empty($product->fees)) {
    // Load all applicible fees for the given nid.
    $fees = $product->fees;
  } else {
    return NULL;
  }

  $form_fees = array();

  // Loop through each product fee and generate its form element.
  foreach ($fees as $fee) {
    if ($fee->display_on_product) {
      $form_fees[$fee->fid] = array(
        '#type' => 'item',
        '#title' => $fee->name,
        '#description' => $fee->description,
        '#markup' => theme('uc_fee_price', array('fee' => $fee)),
      );
    }
  }
  return $form_fees;
}

/**
 * Calculates the fees for an order based on enabled fee modules.
 *
 * @param $order
 *   The full order object for the order want to calculate fees for.
 * @return
 *   An array of fees for the order.
 */
/*function uc_fee_calculate($order) {
  // Find any fees specified by enabled modules.
  $fees = module_invoke_all('calculate_fees', $order);

  return $fees;
}*/

/**
 * Calculate the amount and types of fees that apply to an order.
 */
function uc_fee_calculate_fees($order) {
  global $user;
  
  if (is_numeric($order)) {
    $order = uc_order_load($order);
    $account = user_load($order->uid);
  }
  elseif ((int)$order->uid) {
    $account = user_load(intval($order->uid));
  }
  else {
    $account = $user;
  }

  if (!is_object($order)) {
    return array();
  }

  $fees_total = 0;
  if (is_array($order->line_items)) {
    foreach ($order->line_items as $i => $line) {
	  if ($line['type'] == 'fee') {
		$fees_total += $line['amount'];
	  }
    }
  }

  $apply_fees = array();
  $applied_exclusive = FALSE;
  $fees = uc_fee_get_fees();
  $order->fees = $fees_total; // array();

  rules_invoke_event('calculate_fees', $order, $account);

  return $fees_total;
}

/**
 * AJAX callback for order preview.
 *
 * Calculate fee amounts for an order in the payment checkout pane.
 */
function uc_fee_javascript() {
  $order = $_POST['order'];
  if ($order = unserialize(rawurldecode($order))) {
    $fees = module_invoke_all('calculate_fees', $order);
  }
  drupal_json_output($fees);
}

/**
 * Theme functions.
 */
function theme_uc_fee_price($variables) {
  $fee = $variables['fee'];
  $fee_price = (!isset($fee->default_price) || is_null($fee->default_price)) ? $fee->price : $fee->default_price;
  return $fee->type == UC_FEE_TYPE_ABSOLUTE ? uc_currency_format($fee_price) : $fee_price.'%';
}

function theme_uc_fee_type($variables) {
  $fee = $variables['fee'];
  return $fee->type == UC_FEE_TYPE_ABSOLUTE ? t('Absolute') : t('Percentage');
}
